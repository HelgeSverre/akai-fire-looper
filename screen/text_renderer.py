COLOR_WHITE = 1  # Pixel on
COLOR_BLACK = 0  # Pixel off

# Basic 5x7 pixel font (hex encoded, each byte represents a row of pixels)
PIXEL_FONT = {
    # Space
    " ": [0x00, 0x00, 0x00, 0x00, 0x00],
    # Numbers
    "0": [0x3E, 0x51, 0x49, 0x45, 0x3E],
    "1": [0x00, 0x42, 0x7F, 0x40, 0x00],
    "2": [0x42, 0x61, 0x51, 0x49, 0x46],
    "3": [0x21, 0x41, 0x45, 0x4B, 0x31],
    "4": [0x18, 0x14, 0x12, 0x7F, 0x10],
    "5": [0x27, 0x45, 0x45, 0x45, 0x39],
    "6": [0x3C, 0x4A, 0x49, 0x49, 0x30],
    "7": [0x01, 0x71, 0x09, 0x05, 0x03],
    "8": [0x36, 0x49, 0x49, 0x49, 0x36],
    "9": [0x06, 0x49, 0x49, 0x29, 0x1E],
    # Common symbols
    ".": [0x00, 0x60, 0x60, 0x00, 0x00],
    ":": [0x00, 0x36, 0x36, 0x00, 0x00],
    "-": [0x08, 0x08, 0x08, 0x08, 0x08],
    "+": [0x08, 0x08, 0x3E, 0x08, 0x08],
    # Uppercase letters
    "A": [0x7E, 0x11, 0x11, 0x11, 0x7E],
    "B": [0x7F, 0x49, 0x49, 0x49, 0x36],
    "C": [0x3E, 0x41, 0x41, 0x41, 0x22],
    "D": [0x7F, 0x41, 0x41, 0x22, 0x1C],
    "E": [0x7F, 0x49, 0x49, 0x49, 0x41],
    "F": [0x7F, 0x09, 0x09, 0x09, 0x01],
    "G": [0x3E, 0x41, 0x49, 0x49, 0x7A],
    "H": [0x7F, 0x08, 0x08, 0x08, 0x7F],
    "I": [0x00, 0x41, 0x7F, 0x41, 0x00],
    "J": [0x20, 0x40, 0x41, 0x3F, 0x01],
    "K": [0x7F, 0x08, 0x14, 0x22, 0x41],
    "L": [0x7F, 0x40, 0x40, 0x40, 0x40],
    "M": [0x7F, 0x02, 0x0C, 0x02, 0x7F],
    "N": [0x7F, 0x04, 0x08, 0x10, 0x7F],
    "O": [0x3E, 0x41, 0x41, 0x41, 0x3E],
    "P": [0x7F, 0x09, 0x09, 0x09, 0x06],
    "Q": [0x3E, 0x41, 0x51, 0x21, 0x5E],
    "R": [0x7F, 0x09, 0x19, 0x29, 0x46],
    "S": [0x46, 0x49, 0x49, 0x49, 0x31],
    "T": [0x01, 0x01, 0x7F, 0x01, 0x01],
    "U": [0x3F, 0x40, 0x40, 0x40, 0x3F],
    "V": [0x1F, 0x20, 0x40, 0x20, 0x1F],
    "W": [0x3F, 0x40, 0x38, 0x40, 0x3F],
    "X": [0x63, 0x14, 0x08, 0x14, 0x63],
    "Y": [0x07, 0x08, 0x70, 0x08, 0x07],
    "Z": [0x61, 0x51, 0x49, 0x45, 0x43],
}


class TextStyle:
    """Text rendering style configuration"""

    def __init__(self, invert=False, size=1, padding=0):
        self.invert = invert  # White text on black bg when True
        self.size = size  # Text scaling factor
        self.padding = padding  # Padding around text


class TextBlock:
    """A block of text with its own style"""

    def __init__(self, text, style=None):
        self.text = text
        self.style = style or TextStyle()


def render_text(display, text, x, y, style):
    """Render text to display using pixel font"""

    # Calculate text dimensions
    text_width = len(text) * 6 * style.size
    text_height = 7 * style.size

    # Draw background if inverted
    if style.invert:
        x_with_pad = x - style.padding
        y_with_pad = y - style.padding
        width_with_pad = text_width + (style.padding * 2)
        height_with_pad = text_height + (style.padding * 2)
        display.fill_rect(
            x_with_pad, y_with_pad, width_with_pad, height_with_pad, COLOR_WHITE
        )

    # Draw each character
    current_x = x
    for char in text.upper():
        if char not in PIXEL_FONT:
            char = "-"  # Fallback character

        char_data = PIXEL_FONT[char]
        char_height = 7 * style.size
        adjusted_y = display.SCREEN_HEIGHT - y - char_height

        for row in range(7):
            for col in range(5):
                pixel = (char_data[col] >> row) & 1
                if pixel:
                    pixel_color = COLOR_BLACK if style.invert else COLOR_WHITE
                    for dy in range(style.size):
                        for dx in range(style.size):
                            display.set_pixel(
                                current_x + col * style.size + dx,
                                adjusted_y + row * style.size + dy,
                                pixel_color,
                            )
